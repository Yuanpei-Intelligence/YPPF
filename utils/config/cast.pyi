from typing import Callable, Any, TypeVar, overload, Literal, Iterable, Sequence
from datetime import datetime


_T = TypeVar('_T')

@overload
def mapping(sequence: Callable[[Iterable], set], item: Callable[[Any], _T]) -> Callable[[Iterable], set[_T]]: ...
@overload
def mapping(sequence: Callable[[Iterable], list], item: Callable[[Any], _T]) -> Callable[[Iterable], list[_T]]: ...
@overload
def mapping(sequence: Callable[[Iterable], tuple], item: Callable[[Any], _T]) -> Callable[[Iterable], tuple[_T]]: ...
@overload
def mapping(sequence: Callable[[Iterable], Sequence], item: Callable[[Any], _T]) -> Callable[[Iterable], Sequence[_T]]: ...
@overload
def mapping(sequence: Callable[[Iterable], Iterable], item: Callable[[Any], _T]) -> Callable[[Iterable], Iterable[_T]]: ...


@overload
def optional(func: Callable[[Any], _T], default: Literal[None] = None) -> Callable[[Any], _T | None]: ...
@overload
def optional(func: Callable[[Any], _T], default: _T = None) -> Callable[[Any], _T]: ...


@overload
def str_to_time(str_time: str, *formats: str, optional: Literal[False] = ...) -> datetime: ...
@overload
def str_to_time(str_time: str, *formats: str, optional: Literal[True] = ...) -> datetime | None: ...