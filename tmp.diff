diff --git a/data_analysis/management/commands/dump_rank_info.py b/data_analysis/management/commands/dump_rank_info.py
index dc48189..d6dcc44 100644
--- a/data_analysis/management/commands/dump_rank_info.py
+++ b/data_analysis/management/commands/dump_rank_info.py
@@ -9,6 +9,7 @@ class Command(BaseCommand):
     def handle(self, *args, **option):
         cur_year = 2022
         co_list, func_list, discuss_list = [], [], []
+        cal_appoint(NaturalPerson.objects.get(person_id__username=1800017716))
         for person in NaturalPerson.objects.activated().exclude(stu_grade=cur_year):
             sid = person.person_id.username
             co_list.append((sid, cal_co_appoint(
@@ -20,8 +21,11 @@ class Command(BaseCommand):
         co_list = sorted(co_list, key=lambda x: x[1])
         func_list = sorted(func_list, key=lambda x: x[1])
         discuss_list = sorted(discuss_list, key=lambda x: x[1])
-        return dict(
+        d = dict(
             co_pct=[s for s, _ in co_list],
             func_appoint_pct=[s for s, _ in func_list],
-            discuss_list=[s for s, _ in discuss_list]
+            discuss_appoint_pct=[s for s, _ in discuss_list]
         )
+        import json
+        with open('test_data/rank_info.json', 'w') as f:
+            json.dump(d, f)
diff --git a/data_analysis/summary.py b/data_analysis/summary.py
index de7aa29..27fce46 100644
--- a/data_analysis/summary.py
+++ b/data_analysis/summary.py
@@ -281,6 +281,8 @@ def cal_study_room(np: NaturalPerson):
     _study_room_reords = CardCheckInfo.objects.filter(
         _study_room_record_filter)
 
+    if not _study_room_reords.exists():
+        return dict(study_room_num=0) 
     study_room_num = _study_room_reords.aggregate(cnt=Count('*')).get('cnt', 0)
     study_room_day = _study_room_reords.values_list('Cardtime__date').annotate(
         cnt=Count('*')).aggregate(cnt=Count('*')).get('cnt', 0)
@@ -312,6 +314,8 @@ def cal_early_room(np: NaturalPerson):
                        Cardtime__hour__lt=8,
                        Cardtime__hour__gte=6)
     _room_reords = CardCheckInfo.objects.filter(_record_filter)
+    if not _room_reords.exists():
+        return dict(early_day_num=0)
     early_day_num = _room_reords.values_list('Cardtime__date').annotate(
         cnt=Count('*')).aggregate(cnt=Count('*')).get('cnt', 0)
     if early_day_num:
@@ -338,17 +342,25 @@ def cal_late_room(np: NaturalPerson):
     _room_reords = CardCheckInfo.objects.filter(_record_filter)
     late_room_num = len(list(set(_room_reords.filter(
         _late_filter_night).values_list('Cardtime__date'))))
+    if not late_room_num:
+        return dict(late_room_num=0)
     _dawn_records = list(_room_reords.filter(_late_filter_dawn).values_list(
-        'Cardroom', 'Cardtime__date', 'Cardtime_time'))
+        'Cardroom', 'Cardtime__date', 'Cardtime__time'))
     if _dawn_records:
         _latest_record = max(_dawn_records, key=lambda x: x[2])
     else:
         _latest_record = max(_room_reords.filter(_late_filter_night).values_list(
-            'Cardroom', 'Cardtime__date', 'Cardtime_time'), key=lambda x: x[2])
+            'Cardroom', 'Cardtime__date', 'Cardtime__time'), key=lambda x: x[2])
     late_room, late_room_date, late_room_time = _latest_record
-    # TODO: late people
+    _late_room_ref_date = late_room_date
+    if late_room_time.hour < 23:
+        _late_room_ref_date = late_room_date - timedelta(days=1)
+    late_room_people = len(list(set(CardCheckInfo.objects.filter(Cardtime__gt=_start_time,
+                                                    Cardtime__lt=_end_time,
+                                                    Cardtime__date=_late_room_ref_date,
+                                                    Cardtime__hour__gte=22
+                                            ).values_list('Cardstudent'))))
     return locals()
-    # 应该是多少个晚上在地下室
 
 
 def cal_appoint(np: NaturalPerson):
@@ -366,25 +378,34 @@ def cal_appoint(np: NaturalPerson):
     _me_act_appoint = Appoint.objects.not_canceled().filter(
         students=_par, Astart__gt=_start_time, Astart__lt=_end_time)
     _me_act_talk_appoint = _me_act_appoint.filter(Room__in=_talk_rooms)
-    discuss_appoint_num = _me_act_talk_appoint.aggregate(cnt=Count('*'))['cnt']
-    discuss_appoint_hour = sum([(finish - start).seconds for start,
-                               finish in _me_act_talk_appoint.values_list('Astart', 'Afinish')])//3600
-    discuss_appoint_long_room, discuss_appoint_long_hour = max([(r[0], _me_act_appoint.filter(Room=r).aggregate(
-        tol=Sum(F('Afinish') - F('Astart')))['tol'].total_seconds()//3600) for r in _talk_rooms], key=lambda x: x[1])
+    if not _me_act_appoint.exists():
+        return {}
+    if not _me_act_talk_appoint.exists():
+        discuss_appoint_num = 0
+    else:
+        discuss_appoint_num = _me_act_talk_appoint.aggregate(cnt=Count('*'))['cnt']
+
+        discuss_appoint_hour = sum([(finish - start).seconds for start,
+                                finish in _me_act_talk_appoint.values_list('Astart', 'Afinish')])//3600
+        _my_talk_rooms = _me_act_talk_appoint.values_list('Room')
+        discuss_appoint_long_room, discuss_appoint_long_hour = max([(r[0], _me_act_appoint.filter(Room=r).aggregate(
+            tol=Sum(F('Afinish') - F('Astart')))['tol'].total_seconds()//3600) for r in _my_talk_rooms], key=lambda x: x[1])
     appiont_most_day, appoint_most_num = Counter(
         _me_act_appoint.values_list('Astart__date')).most_common(1)[0]
     appiont_most_day = appiont_most_day[0].strftime('%m月%d日')
 
     _me_act_func_appoint = _me_act_appoint.filter(Room__in=_func_rooms)
-    func_appoint_num = _me_act_func_appoint.aggregate(cnt=Count('*'))['cnt']
-    func_appoint_hour = _me_act_func_appoint.aggregate(
-        tol=Sum(F('Afinish') - F('Astart')))['tol'].total_seconds()//3600
-    # django 的 groupby 真的烂
-    # func_appoint_most = _me_act_func_appoint.values_list('Room').annotate(cnt=Count('*'))
-    func_appoint_most, func_appoint_most_hour = Counter(
-        _me_act_func_appoint.values_list('Room__Rtitle')).most_common(1)[0]
-    func_appoint_most = func_appoint_most[0]
-    # TODO: add percent
+    if not _me_act_func_appoint.exists():
+        func_appoint_num = func_appoint_hour = 0
+    else:
+        func_appoint_num = _me_act_func_appoint.aggregate(cnt=Count('*'))['cnt']
+        func_appoint_hour = _me_act_func_appoint.aggregate(
+            tol=Sum(F('Afinish') - F('Astart')))['tol'].total_seconds()//3600
+        # django 的 groupby 真的烂
+        # func_appoint_most = _me_act_func_appoint.values_list('Room').annotate(cnt=Count('*'))
+        func_appoint_most, func_appoint_most_hour = Counter(
+            _me_act_func_appoint.values_list('Room__Rtitle')).most_common(1)[0]
+        func_appoint_most = func_appoint_most[0]
     return remove_local_var(locals())
 
 
@@ -427,6 +448,8 @@ def cal_co_appoint(np: NaturalPerson):
         for _co_np in appoint.students.all():
             if _co_np != _par:
                 _co_np_list.append(_co_np)
+    if not _co_np_list:
+        return {}
     co_mate, co_appoint_num = Counter(_co_np_list).most_common(1)[0]
     _co_act_appoint = _me_act_appoint.filter(students=co_mate)
     co_appoint_hour = _co_act_appoint.aggregate(
@@ -449,6 +472,5 @@ def cal_co_appoint(np: NaturalPerson):
             continue
         _key_words.extend(jieba.cut(usage[0]))
     co_keyword = Counter(_key_words).most_common(1)[0]
-    # TODO: percent
 
     return remove_local_var(locals())
diff --git a/templates/Appointment/summary2.html b/templates/Appointment/summary2.html
index 83670b8..a30961d 100644
--- a/templates/Appointment/summary2.html
+++ b/templates/Appointment/summary2.html
@@ -103,7 +103,8 @@
     <section class="section page page-2">
       <div class="bg-back"></div>
       <div class="content">
-        <p class="para"><span class="fs-20 fc-red">{{late_room_year}}年{{late_room_month}}月{{late_room_day}}日</span></p>
+        {% comment %} <p class="para"><span class="fs-20 fc-red">{{late_room_year}}年{{late_room_month}}月{{late_room_day}}日</span></p> {% endcomment %}
+        <p class="para"><span class="fs-20 fc-red">{{late_room_date}}</span></p>
         <p class="para mt-10"><span class="fs-20 fc-red">{{late_room}}</span>陪伴你直到<span class="fs-20 fc-red">{{late_room_time}}</span></p>
         <p class="para mt-35">那一天，有<span class="fs-20 fc-red">{{late_room_people}}</span>人也在地下室的另一角研磨属于自己的夜。</p>
         <p class="para mt-10">你们是否在地下空间相遇，</p>
@@ -152,12 +153,12 @@
           <div class="wave wave-4"></div>
         </div>
         <ul class="lines">
-          <li class="line line-1"><span class="text">{{Skeywords.0}}</span></li>
-          <li class="line line-2"><span class="text">{{Skeywords_num.0}}</span></li>
-          <li class="line line-3"><span class="text">{{Skeywords.1}}</span></li>
-          <li class="line line-4"><span class="text">{{Skeywords_num.1}}</span></li>
-          <li class="line line-5"><span class="text">{{Skeywords.2}}</span></li>
-          <li class="line line-6"><span class="text">{{Skeywords_num.2}}</span></li>
+          <li class="line line-1"><span class="text">{{Skeywords.0.0}}</span></li>
+          <li class="line line-2"><span class="text">{{Skeywords.0.1}}</span></li>
+          <li class="line line-3"><span class="text">{{Skeywords.1.0}}</span></li>
+          <li class="line line-4"><span class="text">{{Skeywords.1.1}}</span></li>
+          <li class="line line-5"><span class="text">{{Skeywords.2.0}}</span></li>
+          <li class="line line-6"><span class="text">{{Skeywords.2.1}}</span></li>
         </ul>
         <p class="para mt-35">欢乐、疲惫、热爱、专注…</p>
         <p class="para mt-10">无论是学习工作，还是轻松的欢聚，这里都由你记录，由你定义。</p>
